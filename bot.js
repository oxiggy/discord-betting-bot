import { Client, GatewayIntentBits, PermissionsBitField } from 'discord.js';

const TOKEN = process.env.DISCORD_TOKEN;
const TARGET_ROLE_ID = process.env.TARGET_ROLE_ID;

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ]
});

let guildMembers = null;
const userBalances = new Map();
const START_BALANCE = 1000;
const betsPlayer1 = new Map();
const betsPlayer2 = new Map();
let matchPlayer1 = null;
let matchPlayer2 = null;
let matchTimer = null;

function resetMatch() {
  matchPlayer1 = null;
  matchPlayer2 = null;
  betsPlayer1.clear();
  betsPlayer2.clear();
  matchTimer = null;
  console.log("üîÑ –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ —Å–±—Ä–æ—à–µ–Ω—ã.");
}

client.once('ready', () => {
  console.log(`‚úÖ –ë–æ—Ç ${client.user.tag} –∑–∞–ø—É—â–µ–Ω!`);
});

client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  if (message.content.toLowerCase() === "!—Å—Ç–∞—Ä—Ç") {
    guildMembers = await message.guild.members.fetch();
    const helpMessage = "**–ö–æ–º–∞–Ω–¥—ã:**\n" +
      "`!–∫—Ä–∞–±–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è`- –≤—ã–¥–∞—á–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–æ–∏–Ω–æ–≤ \n" +
      "`!–∫–ª–µ—à–Ω–µ—É—á—ë—Ç` - –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞–∫–æ–≤\n" +
      "`!—É–ª–æ–≤` - –ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ä–∞–∫–∞\n" +
      "`!–º–∞—Ç—á –Ω–∏–∫–Ω–µ–π–º1 –Ω–∏–∫–Ω–µ–π–º2` - –∑–∞–ø—É—Å–∫ –±–∏—Ç–≤—ã\n" +
      "`!—Å—Ç–∞–≤–∫–∞ –Ω–∏–∫–Ω–µ–π–º —á–∏—Å–ª–æ` - –≤–∞—à–∏ –∫–æ–∏–Ω—ã –≤–æ –∏–º—è —Ä–∞–∫–∞\n" +
      "`!–ø–æ–±–µ–¥–∞ –Ω–∏–∫–Ω–µ–π–º` - –≤–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–ª–µ—à–Ω–µ–π\n" +
      "`!–∫–ª–µ—à–Ω–µ—Å–±—Ä–æ—Å` - –æ—Ç–º–µ–Ω–∏—Ç—å –±–∏—Ç–≤—É\n" +
      "`!–∑–∞–Ω–∞–≤–µ—Å`\n";
    await message.channel.send(helpMessage);
  }

  if (message.content.toLowerCase().startsWith("!–º–∞—Ç—á")) {
    if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      return message.reply("‚ùå –ü–æ–∑–æ–≤–∏—Ç–µ —Ä–∞–∫–∞-–∞–¥–º–∏–Ω–∞!");
    }
    const args = message.content.split(" ").slice(1);
    if (args.length < 2) {
      return message.channel.send("‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–æ–π—Ü–æ–≤! –£–∫–∞–∂–∏—Ç–µ –¥–≤—É—Ö –¥–æ—Å—Ç–æ–π–Ω—ã—Ö –∫—Ä–∞–±–æ-–≤–æ–∏–Ω–æ–≤. –ü—Ä–∏–º–µ—Ä: `!–º–∞—Ç—á –Ω–∏–∫–Ω–µ–π–º1 –Ω–∏–∫–Ω–µ–π–º2` ü¶Äü¶Ä");
    }
    if (matchPlayer1 || matchPlayer2) {
      return message.channel.send("‚ùå –ê—Ä–µ–Ω–∞ –∑–∞–Ω—è—Ç–∞! –î–≤–∞ –∫—Ä–∞–±–∞ –≤—ã—è—Å–Ω—è—é—Ç, —á–µ–π –ø–∞–Ω—Ü–∏—Ä—å –∫—Ä–µ–ø—á–µ. üèüÔ∏è");
    }
    matchPlayer1 = args[0].trim();
    matchPlayer2 = args[1].trim();
    betsPlayer1.clear();
    betsPlayer2.clear();
    await message.channel.send(`üéÆ –ö—Ä–∞–±–æ–¥—Ä–∞–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í —É–≥–ª—É –ø–µ—Å—á–∞–Ω–æ–≥–æ —Ä–∏–Ω–≥–∞ ‚Äì ${matchPlayer1}, –≤ –¥—Ä—É–≥–æ–º ‚Äì ${matchPlayer2}! –î–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã!`);
    matchTimer = setTimeout(() => {
      if (!matchTimer) return; // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –±—ã–ª —Å–±—Ä–æ—à–µ–Ω, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –¥–∞–ª—å—à–µ
      const player1Bettors = Array.from(betsPlayer1.keys()).map(userId => `<@${userId}>`).join(", ") || "–ù–∏–∫—Ç–æ –Ω–µ —Ä–∏—Å–∫–Ω—É–ª –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –ö—Ä–∞–± –ö–æ–∏–Ω—ã‚Ä¶ –ö—Ä–∞–±—ã –≤ —à–æ–∫–µ! ü¶Äüíî";
      const player2Bettors = Array.from(betsPlayer2.keys()).map(userId => `<@${userId}>`).join(", ") || "–ù–∏–∫—Ç–æ –Ω–µ —Ä–∏—Å–∫–Ω—É–ª –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –ö—Ä–∞–± –ö–æ–∏–Ω—ã‚Ä¶ –ö—Ä–∞–±—ã –≤ —à–æ–∫–µ! ü¶Äüíî";
      message.channel.send(
        `‚è≥ –ö–ª–µ—à–Ω–∏ —Å–∂–∞—Ç—ã, —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã! –ë–∏—Ç–≤–∞ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è! üî•\n\n` +
        `ü¶Ä –ù–∞ **${matchPlayer1}** –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ–∏ –ö—Ä–∞–± –ö–æ–∏–Ω—ã: ${player1Bettors}\n` +
        `ü¶Ä –ù–∞ **${matchPlayer2}** –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ–∏ –ö—Ä–∞–± –ö–æ–∏–Ω—ã: ${player2Bettors}`
      );
      matchTimer = null;
    }, 60000); // 1 –º–∏–Ω—É—Ç—ã
  }

  if (message.content.toLowerCase().startsWith("!—Å—Ç–∞–≤–∫–∞")) {
    if (!matchTimer) {
      return message.reply("‚ùå –í—Å—ë! –ö–ª–µ—à–Ω–∏ —Å—Ö–ª–æ–ø–Ω—É–ª–∏—Å—å, —Å—Ç–∞–≤–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã! –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –±–∏—Ç–≤–µ! ‚öîÔ∏è");
    }
    const args = message.content.split(" ").slice(1);
    if (args.length < 2) {
      return message.reply("‚ùå –ö—Ä–∞–±–æ-—Ñ–µ–π–ª! –î–∞–∂–µ —Ä–∞–∫–∏ –∑–Ω–∞—é—Ç, —á—Ç–æ –Ω–∞–¥–æ —Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ: `!—Å—Ç–∞–≤–∫–∞ –Ω–∏–∫–Ω–µ–π–º —á–∏—Å–ª–æ`");
    }
    const targetPlayer = args[0].trim();
    const amount = parseInt(args[1].trim(), 10);
    const userId = message.author.id;
    if (![matchPlayer1, matchPlayer2].includes(targetPlayer)) {
      return message.reply("‚ùå –ö–ª–µ—à–Ω–µ–∑–∞–ø—Ä–µ—Ç! –≠—Ç–æ—Ç –∫—Ä–∞–± –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –±–æ—é. –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞! ‚öîÔ∏è");
    }
    if (isNaN(amount)) {
      return message.reply("‚ùå –ö—Ä–∞–±–æ-—Å–±–æ–π! –ü–∞–Ω—Ü–∏—Ä–Ω—ã–π –±–∞–Ω–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –∞ –Ω–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!");
    }
    if (amount <= 0) {
      return message.reply("‚ùå –û—à–∏–±–∫–∞! –ö—Ä–∞–±—ã –Ω–µ —É–º–µ—é—Ç –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –≤ –¥–æ–ª–≥. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!");
    }
    const userBalance = userBalances.get(userId) || 0;
    if (amount > userBalance) {
      return message.reply("‚ùå –ö–ª–µ—à–Ω–∏ –ø—É—Å—Ç—ã! –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.");
    }
    if (targetPlayer === matchPlayer1) {
      if (betsPlayer2.has(userId)) {
        return message.reply("‚ùå –ö–ª–µ—à–Ω–µ-–¥–∏–ª–µ–º–º–∞! –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É, –ø–∞–Ω—Ü–∏—Ä—å –Ω–µ —Ç–µ—Ä–ø–∏—Ç –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞!");
      }
      betsPlayer1.set(userId, amount);
    } else {
      if (betsPlayer1.has(userId)) {
        return message.reply("‚ùå –ö–ª–µ—à–Ω–µ-–¥–∏–ª–µ–º–º–∞! –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É, –ø–∞–Ω—Ü–∏—Ä—å –Ω–µ —Ç–µ—Ä–ø–∏—Ç –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞!");
      }
      betsPlayer2.set(userId, amount);
    }
    userBalances.set(userId, userBalance - amount);
    const member = await message.guild.members.fetch(userId);
    if (!member.roles.cache.has(TARGET_ROLE_ID)) {
      await member.roles.add(TARGET_ROLE_ID);
    }
    console.log(`–°—Ç–∞–≤–∫–∞ –æ—Ç ${userId} –Ω–∞ ${targetPlayer} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ ${amount} –ø—Ä–∏–Ω—è—Ç–∞.`);
    await message.react("‚úÖ");
  }

  if (message.content.toLowerCase().startsWith("!–ø–æ–±–µ–¥–∞")) {
    if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      return message.reply("üì¢ –ü–æ–∑–æ–≤–∏—Ç–µ —Ä–∞–∫–∞-–∞–¥–º–∏–Ω–∞! –¢–æ–ª—å–∫–æ –æ–Ω –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ—Ç —ç–ø–∏—á–µ—Å–∫–∏–π –±–æ–π. ");
    }
    const args = message.content.split(" ").slice(1);
    console.log(args);
    console.log(matchPlayer1, matchPlayer2 );
    const winner = args[0].trim();
    if (!matchPlayer1 || !matchPlayer2 || ![matchPlayer1.toLowerCase(), matchPlayer2.toLowerCase()].includes(winner.toLowerCase())) {
      return message.reply("‚ùå –û—à–∏–±–∫–∞! –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤–µ—Ä–Ω–æ.");
    }
    const winningBets = winner === matchPlayer1 ? betsPlayer1 : betsPlayer2;
    winningBets.forEach((amount, userId) => {
      userBalances.set(userId, (userBalances.get(userId) || 0) + amount * 2);
    });
    await message.channel.send(`–ü–æ–±–µ–¥–∏–ª **${winner}**! –ö–ª–µ—à–Ω–∏ –≤–≤–µ—Ä—Ö, —Å—Ç–∞–≤–∫–∏ —É–¥–≤–æ–µ–Ω—ã!`);
    resetMatch();
  }

  if (message.content.toLowerCase().startsWith("!–∫–ª–µ—à–Ω–µ—Å–±—Ä–æ—Å")) {
    if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      return message.reply("üì¢ –ü–æ–∑–æ–≤–∏—Ç–µ —Ä–∞–∫–∞-–∞–¥–º–∏–Ω–∞!");
    }
    betsPlayer1.forEach((amount, userId) => {
      userBalances.set(userId, (userBalances.get(userId) || 0) + amount);
    });
    betsPlayer2.forEach((amount, userId) => {
      userBalances.set(userId, (userBalances.get(userId) || 0) + amount);
    });
    await message.channel.send("‚õî –ê—Ä–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞! –í—Å–µ —Å—Ç–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –≤–∞—à–∏ –∫–ª–µ—à–Ω–∏. ü§≤");
    resetMatch();
  }

  if (message.content.toLowerCase() === "!–∫—Ä–∞–±–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è") {
    if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      return message.reply("üì¢ –ü–æ–∑–æ–≤–∏—Ç–µ —Ä–∞–∫–∞-–∞–¥–º–∏–Ω–∞!");
    }
    try {
      console.log(` –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ '${message.guild.name}'...`);
      const members = await message.guild.members.fetch();
      console.log(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${members.size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.`);

      members.each((member) => {
        if (!member.user.bot) {
          userBalances.set(member.user.id, START_BALANCE);
        }
      })
      console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ '${message.guild.name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`);
      //console.log("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –±–∞–ª–∞–Ω—Å:");
      //userBalances.forEach((balance, userId) => {
      //  console.log(`${userId}: ${balance}`);
      //});
      await message.channel.send("–ö—Ä–∞–±–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —É –∫–∞–∂–¥–æ–≥–æ –µ—Å—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∑–∞–ø–∞—Å –ö—Ä–∞–± –ö–æ–∏–Ω–æ–≤! ü¶Äüí∞");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–ª–∞–Ω—Å–∞:", error);
      await message.channel.send("‚ö†Ô∏è –ö—Ä–∞–±–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–∞–±—ã –∑–∞—Å—Ç—Ä—è–ª–∏ –≤ –ø–µ—Å–∫–µ –∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å. ü¶Ä‚è≥");
    }
  }

  if (message.content.toLowerCase() === "!–∫–ª–µ—à–Ω–µ—É—á—ë—Ç") {
    try {
      console.log(`–§–∏–ª—å—Ç—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—å—é ID ${TARGET_ROLE_ID}...`);
      const members = await message.guild.members.fetch();
      const filteredMembers = members.filter(member => member.roles.cache.has(TARGET_ROLE_ID));
      if (filteredMembers.size === 0) {
        return message.channel.send("‚ùå –†–∞—á–µ–ª –µ—â—ë –Ω–µ—Ç!");
      }
      let balanceMessage = "üèüÔ∏è **–ö—Ä–∞–±–∫–∞–ø–∏—Ç–∞–ª:**\n";
      filteredMembers.each(member => {
        const balance = userBalances.get(member.user.id) || 0;
        balanceMessage += `ü¶Ä ${member.user.username}: ${balance} Crab Coins\n`;
      });
      console.log("–ë–∞–ª–∞–Ω—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç.");
      await message.channel.send(balanceMessage);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –±–∞–ª–∞–Ω—Å–æ–≤:", error);
      await message.channel.send("‚ö†Ô∏è –ö–ª–µ—à–Ω—è –∑–∞—Å—Ç—Ä—è–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤.");
    }
  }

  if (message.content.toLowerCase().startsWith("!—É–ª–æ–≤")) {
    const userId = message.author.id;
    const balance = userBalances.get(userId) || 0;
    await message.reply(`üí∞ –£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É ${balance} –ö—Ä–∞–± –ö–æ–∏–Ω–æ–≤! –ë—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –∏–ª–∏ –∫–æ–ø–∏—Ç—å –Ω–∞ –∫—Ä–∞–±–æ–≤—ã–π –æ—Å–æ–±–Ω—è–∫? ü¶û`);
  }

  if (message.content.toLowerCase().startsWith("!—É—Å—Ç–∞–Ω–æ–≤–∏")) {
    const args = message.content.split(" ").slice(1);
    if (args.length < 2) {
      return message.reply("‚ùå –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: `!—É—Å—Ç–∞–Ω–æ–≤–∏ id —á–∏—Å–ª–æ`");
    }
    const targetId = args[0];
    const amount = parseInt(args[1], 10);
    if (isNaN(amount) || amount < 0) {
      return message.reply("‚ùå –û—à–∏–±–∫–∞! –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.");
    }
    userBalances.set(targetId, amount);
    await message.reply(`‚úÖ –ö–ª–µ—à–Ω–µ—É—á—ë—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetId} —Ç–µ–ø–µ—Ä—å ${amount} –ö—Ä–∞–± –ö–æ–∏–Ω–æ–≤.`);
  }

  if (message.content.toLowerCase().startsWith("!–∑–∞–Ω–∞–≤–µ—Å")) {
    if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      return message.reply("‚ùå –ö–ª–µ—à–Ω–∏ —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    }
    try {
      const members = await message.guild.members.fetch();
      const filteredMembers = members.filter(member => member.roles.cache.has(TARGET_ROLE_ID));
      let balanceMessage = "**–°–ø–∏—Å–æ–∫ –±–∞–ª–∞–Ω—Å–æ–≤:**\n";
      for (const member of filteredMembers.values()) {
        const balance = userBalances.get(member.user.id) || 0;
        balanceMessage += `!—É—Å—Ç–∞–Ω–æ–≤–∏ ${member.user.id} ${balance}\n`;
        await member.roles.remove(TARGET_ROLE_ID);
      }
      await message.author.send(balanceMessage);
      await message.reply("‚úÖ –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –í—Å–µ —Ä–æ–ª–∏ —É–¥–∞–ª–µ–Ω—ã.");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞–ª–∞–Ω—Å–æ–≤:", error);
      await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
    }
    resetMatch();
  }
});


client.login(TOKEN);